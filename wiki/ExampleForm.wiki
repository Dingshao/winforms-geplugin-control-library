#summary A simple winform example
#labels Phase-Implementation,Featured

= Introduction =

This form shows the most basic set up of the GEWebBrowser, there are no other controls added.

= Details =

Here the plugin behaves exactly as it would with the default set-up in a web page. You can use the mouse and keys to navigate when the control has focus.

The dynamic type 'ge' returned by the PluginReady event allows one to work seemlessly with the GEPlugin object, just as if you were programming in the native !javaScript API.

However, it is worth noting that the other controls ([GEStatusStrip], [GEToolStrip], [KmlTreeView]) and the other helper classes ([GEHelpers], [KmlHelpers], [GEOptions], etc) in this library offer much cleaner, safer, managed, ways to work with the Api.

{{{
 public partial class Form1 : Form
    {
        // To hold the plugin object 
        private dynamic ge = null;

        public Form1()
        {
            InitializeComponent();
              
            // load the test page
            geWebBrowser1.LoadEmbededPlugin();

            // set up some event handelers
            geWebBrowser1.PluginReady += new GEWebBrowserEventHandeler(geWebBrowser1_PluginReady);
        }

        void geWebBrowser1_PluginReady(object sender, GEEventArgs e)
        {
           // Set the variable to the plugin object
           ge = browser.GetPlugin();

           // Here you can now use 'ge' exactly as you would
           // in the native javascript api. It is worth noting 
           // that any direct calls to Api members should be
           // wrapped in a try/catch for RuntimeBinder exceptions

           // for example:
           try
           {
              var options = ge.getOptions();
              options.setGridVisibility(1);
           }
           catch(RuntimeBinderException rbex)
           {
              //Handle the exception
           }
        }
    }

}}}

<wiki:gadget url="http://earthapi.googlepages.com/ad.xml" border="0" width="728" height="90" />
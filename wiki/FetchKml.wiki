#summary Using the FetchKml method
#sidebar TableOfContents

<wiki:toc max_depth="2" />

= Introduction =

This is a wrapper for the google.earth.fetchKml method. 

= Details = 

Because it is not possible to work directly with the members of the google.earth namespace in managed code a pair of wrapper functions are required; one in javascript and one in managed code.

For more information on the google.earth.fetchKml method please see: http://code.google.com/apis/earth/documentation/reference/google_earth_namespace.html#afca518f43d5f863b254c5fa23a5967f2

== Syntax ==

{{{
public void FetchKml(
    string Uri
)
}}}

== Examples ==

This example loads the remote file 'placemarks.kml' in geWebBrowser1.

{{{
geWebBrowser1.FetchKml("http://www.site.com/placemarks.kml");
}}}

This example loads the remote file 'model.kmk' in geWebBrowser1.

{{{
geWebBrowser1.FetchKml("http://www.site.com/model.kmz");
}}}


== Remarks ==

This method should only be used once the plug-in has been loaded in the GEWebBrowser for it to have any meaning. Also, this method requires that the holding page has a function call jsFetchKml defined in it. The function in the example Plugin.html page is defined like so;

{{{
// google.earth.fetchKml wrapper
var jsFetchKml = function(url)
{
    google.earth.fetchKml(ge, url, loadKmlCallBack_);
}
}}}

As you can see this function calls the !LoadKmlCallBack method which is defined in javascript as follows:

{{{
var loadKmlCallBack_ = function(kmlObject)
{
  if (kmlObject)
  {
    application.LoadKmlCallBack(kmlObject);
  }
  else
  {
    application.Error("Kml failed to load");
  }
}
}}}

Here, in turn, the Kml data is returned to managed code using the !LoadKmlCallBack method.

So to add the actual data to GEPlugin or KmlTreeView you would use the [KmlLoaded] event in [GEWebBrowser].


<wiki:gadget url="http://earthapi.googlepages.com/ad.xml" border="0" width="728" height="90" />
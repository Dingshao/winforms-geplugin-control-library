#summary Maths class notes
#labels Phase-Implementation

= Introduction =

Various Geodesic methods to work with the plug-in Api. This class is based on the ideas and methods in the javascript library "geojs" by Roman Nurik.<br>
See: http://code.google.com/p/geojs/

== Constants ==

_System.Double_ *EARTH_RADIUS*<br>
Earth's radius in metres<br>

_System.Double_ *EPSILON*<br>
Smallest significant value <br>

_System.Double_ *MILES_TO_KILOMETRES*<br>
Miles To Kilometres Conversion Ratio<br>

== Public Methods ==

=== Extensions ===

_System.Double_ *!FixLongitudinalAngle*(_System.Double_)<br>
Keep a Longitudinal angle in the [-180, 180] range<br>
*Parameters*<br>
angle: Longitude to fix<br>
*Return Value:* Longitude in range<br>

_System.Double_ *!FixLatitudinalAngle*(_System.Double_)<br>
Keep a Longitudinal angle in the [-90, 90] range<br>
*Parameters*<br>
angle: Longitude to fix<br>
*Return Value:* Longitude to fix<br>

_System.Double_ *!DegreesToRadians*(_System.Double_)<br>
Converts decimal degrees to radians<br>
*Parameters*<br>
degrees: value in degrees<br>
*Return Value:* value in radians<br>

_System.Double_ *!RadiansToDegrees*(_System.Double_)<br>
Converts radians to decimal degrees<br>
*Parameters*<br>
radains: value in radians<br>
*Return Value:* value in degrees<br>

=== Static methods ===

_System.Double_ *!KilometresToMiles*(_System.Double_)<br>
Convert Kilometres To Miles <br>
*Parameters*<br>
kilometres: distance in kilometrees<br>
*Return Value:* distance in miles<br>

_System.Double_ *!MilesToKilometres*(_System.Double_)<br>
Convert Miles To Kilometres<br>
*Parameters*<br>
miles: distance in miles<br>
*Return Value:* distance in kilometrees<br>

_System.Double_ *!NormaliseAngle*(_System.Double_)<br>
Keep a number in the [0,PI] range<br>
*Parameters*<br>
radians: value in radians<br>
*Return Value:* normalised angle in radians<br>

_System.Double_ *!ReverseAngle*(_System.Double_)<br>
Reverses a number in the [0,PI] range<br>
*Parameters*<br>
radians: value in radians<br>
*Return Value:* The oposite angle<br>

_System.Double_ *!DistanceHaversine*(_GEPlugin.IKmlPoint_, _GEPlugin.IKmlPoint_)<br>
Calculates the great circle distance between two points using the Haversine formula<br>
*Parameters*<br>
origin: The first point<br>
destination: The second point<br>
*Return Value:* The distance between the given points in metres<br>

_System.Double_ *!DistanceVincenty*(_GEPlugin.IKmlPoint_, _GEPlugin.IKmlPoint_)<br>
Calculates the great circle distance between two points using the Vincenty formulae<br>
This function is based on the geodesy-library code by Mike Gavaghan <br>
See http://www.gavaghan.org/blog/2007/08/06/c-gps-receivers-and-geocaching-vincentys-formula/<br>
*Parameters*<br>
origin: The first point<br>
destination: The second point<br>
*Return Value:* The distance between the given points in metres<br>

_System.Double_ *!AngularDistance*(_GEPlugin.IKmlPoint_, _GEPlugin.IKmlPoint_)<br>
Calculates the angular distance between teo points<br>
*Parameters*<br>
point1: The fisrt point<br>
point2: The decond point<br>
*Return Value:* <br>

_System.Double_ *Heading*(_GEPlugin.IKmlPoint_, _GEPlugin.IKmlPoint_)<br>
Calculates the initial heading/bearing at which an object at the start<br>
point will need to travel to get to the destination point.<br>
*Parameters*<br>
origin: The first point<br>
destination: The second point<br>
*Return Value:* The initial heading required in degrees<br>

_GEPlugin.IKmlPoint_ *!IntermediatePoint*(_GEPlugin.IKmlPoint_, _GEPlugin.IKmlPoint_, _System.Double_)<br>
Calculates an intermediate point on the geodesic between the two given points <br>
See: http://williams.best.vwh.net/avform.htm#Intermediate<br>
*Parameters*<br>
origin: The first point<br>
destination: The second point<br>
fraction: Intermediate location as a decimal fraction (T value)<br>
*Return Value:* <br>

_GEPlugin.IKmlPoint_ *Destination*(_GEPlugin.IKmlPoint_, _System.Double_, _System.Double_)<br>
Calculates the destination point along a geodesic, given an initial point, heading and distance<br>
see http://www.movable-type.co.uk/scripts/latlong.html<br>
origin: The first point<br>
heading: heading in degrees<br>
distance: distance in metres<br>
*Return Value:* The point at the location along the geodesic<br>

== Source == 

[http://code.google.com/p/winforms-geplugin-control-library/source/browse/trunk/Maths.cs Maths.cs]

== Ads ==

<wiki:gadget url="http://earthapi.googlepages.com/ad.xml" border="0" width="728" height="90" />
#summary Various uses for the AddEventListener method.
#sidebar TableOfContents

<wiki:toc max_depth="2" />

= Introduction =

This method allows you to add an event listener to the plug-in, it is basically a 'wrapper' function for the Google.Earth.addEventListener method in the Api.

== Method ==

{{{
/// <summary>
/// Wrapper for the the google.earth.addEventListener method
/// </summary>
/// <param name="feature">The target feature</param>
/// <param name="action">The event Id</param>
/// <param name="javascript">The name of javascript callback function to use, or an anonymous function</param>
/// <param name="useCapture">Optionally use event capture</param>
/// <example>GEWebBrowser.AddEventListener(object, "click", "someFunction");</example>
/// <example>GEWebBrowser.AddEventListener(object, "click", "function(event){alert(event.getType);}");</example>
public void AddEventListener(dynamic feature, EventId action, string javascript = null, bool useCapture = false)
}}}


== Examples ==

To use an event listener with the built in callback functions simply register the KmlEvent listener then add the events you wish. It is worth noting that KmlLoaded and ViewEvent's have their own in-built delegates. The following example shows how to use the in-bult events to handle kml and view events.

{{{
To follow...
}}}

The easiest way to use your own callback functions in managed code is to extend the External class. This allows you to register your own COM visible methods and to pass event objects to them from the plug-in. The following example shows how to register a custom external class and how to use a method of the class as an event handler.

{{{
To follow...
}}}


== Remarks ===

These functions allow you to easily handle any of the events in the Google Earth Plug-in Api in javascript or managed code.
 
<wiki:gadget url="http://earthapi.googlepages.com/ad.xml" border="0" width="728" height="90" />